#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function prototype for checkWinner
int checkWinner();

// Global variables
char board[3][3];
char player = 'X', computer = 'O';
int difficulty; // Variable to store selected difficulty level

// Function to initialize the board
void initializeBoard() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

// Function to display the board
void displayBoard() {
    printf("\n");
    printf(" %c | %c | %c\n", board[0][0], board[0][1], board[0][2]);
    printf("---|---|---\n");
    printf(" %c | %c | %c\n", board[1][0], board[1][1], board[1][2]);
    printf("---|---|---\n");
    printf(" %c | %c | %c\n", board[2][0], board[2][1], board[2][2]);
    printf("\n");
}

// Function to display the grid with numbers before starting
void displayNumberedGrid() {
    printf("\nTic-Tac-Toe Grid with Numbers (1-9):\n");
    printf(" 1 | 2 | 3\n");
    printf("---|---|---\n");
    printf(" 4 | 5 | 6\n");
    printf("---|---|---\n");
    printf(" 7 | 8 | 9\n");
    printf("\n");
}

// Function to get user input and make a move
void playerMove() {
    int move;

    while (1) {
        printf("Enter your move (1-9, where 1=top-left, 9=bottom-right): ");
        scanf("%d", &move);

        if (move < 1 || move > 9) {
            printf("Invalid move. Please enter a number between 1 and 9.\n");
            continue;
        }

        // Map the move (1-9) to row and column
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;

        if (board[row][col] == ' ') {
            board[row][col] = player;
            break;
        } else {
            printf("Cell already occupied! Try a different move.\n");
        }
    }
}

// Function for the computer to make a move
void computerMove() {
    int row, col;

    printf("Computer's Turn:\n");

    if (difficulty == 2) { // Hard mode
        // Try to block player's winning move or win if possible
        for (row = 0; row < 3; row++) {
            for (col = 0; col < 3; col++) {
                if (board[row][col] == ' ') {
                    board[row][col] = computer;
                    if (checkWinner()) {
                        return; // Computer wins
                    } else {
                        board[row][col] = ' '; // Reset if not winning
                    }

                    board[row][col] = player;
                    if (checkWinner()) {
                        board[row][col] = computer; // Block player's win
                        return;
                    } else {
                        board[row][col] = ' '; // Reset if not blocking
                    }
                }
            }
        }
    }

    // If no winning or blocking move found, play randomly (easy mode or fallback)
    while (1) {
        row = rand() % 3;
        col = rand() % 3;

        if (board[row][col] == ' ') {
            board[row][col] = computer;
            break;
        }
    }
}

// Function to check for a winner
int checkWinner() {
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
            return 1; // Winner found
        }
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
            return 1; // Winner found
        }
    }

    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
        return 1; // Winner found
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
        return 1; // Winner found
    }

    return 0; // No winner yet
}

// Function to check if the board is full (draw)
int isBoardFull() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return 0; // Board is not full
            }
        }
    }
    return 1; // Board is full (draw)
}

int main() {
    srand(time(NULL)); // Initialize random number generator

    // Ask for difficulty level
    printf("Select Difficulty Level:\n");
    printf("1. Easy\n");
    printf("2. Hard\n");
    printf("Enter your choice: ");
    scanf("%d", &difficulty);

    initializeBoard(); // Empty board first

    // Display numbered grid
    displayNumberedGrid();

    printf("=== Welcome to Tic-Tac-Toe Game ===\n");
    printf("You are 'X' and Computer is 'O'\n");

    while (1) {
        displayBoard();
        playerMove();

        if (checkWinner()) {
            displayBoard();
            printf("Congratulations! You win!\n");
            break;
        }

        if (isBoardFull()) {
            displayBoard();
            printf("It's a draw!\n");
            break;
        }

        displayBoard();
        computerMove();

        if (checkWinner()) {
            displayBoard();
            printf("Computer wins! Better luck next time.\n");
            break;
        }

        if (isBoardFull()) {
            displayBoard();
            printf("It's a draw!\n");
            break;
        }
    }

    printf("\nGame Ended!\n");

    return 0;
}
